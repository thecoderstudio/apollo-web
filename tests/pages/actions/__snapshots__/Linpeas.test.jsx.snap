// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`linpeas correctly renders 1`] = `
.c1 {
  height: 100%;
  width: 100%;
  padding: 20px;
  box-sizing: border-box;
}

.c2 {
  height: 100%;
  width: 100%;
}

.c2 .xterm-viewport {
  overflow: hidden !important;
}

.c0 {
  height: 100%;
}

<div>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Component
      theme={
        Object {
          "accent": "#4D02EE",
          "black": "#181818",
          "boxShadow": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
          "connectedColor": "#27AE60",
          "connectingColor": "#F39C12",
          "darkGrey": "#3E3E3E",
          "darkWhite": "#F1F1F1",
          "disconnectedColor": "#C0392B",
          "error": "#ED3E2A",
          "green": "#32E67E",
          "inactive": "#363636",
          "lightBlack": "#1B1B1B",
          "name": "dark",
          "overlay": "rgba(37, 37, 37, 0.6)",
          "primary": "#02A3EE",
          "red": "#ED3E2A",
          "selectedBlack": "#252525",
          "smallTextSize": "0.85rem",
          "warning": "#ED852A",
          "white": "#F8F8F8",
        }
      }
    >
      <Connect(Linpeas)
        match={
          Object {
            "params": Object {
              "agentId": "fakeid",
            },
          }
        }
      >
        <Linpeas
          agents={
            Map {
              "fakeid" => Object {
                "connectionState": "connected",
                "id": "fakeid",
                "name": "fake",
              },
            }
          }
          dispatch={[Function]}
          match={
            Object {
              "params": Object {
                "agentId": "fakeid",
              },
            }
          }
        >
          <styled.div>
            <div
              className="c0"
            >
              <Connect(TerminalPage)
                agentEndpoint="action/linpeas"
                agents={
                  Map {
                    "fakeid" => Object {
                      "connectionState": "connected",
                      "id": "fakeid",
                      "name": "fake",
                    },
                  }
                }
                dispatch={[Function]}
                match={
                  Object {
                    "params": Object {
                      "agentId": "fakeid",
                    },
                  }
                }
                onSocketClose={[Function]}
                readOnly={true}
              >
                <TerminalPage
                  agentEndpoint="action/linpeas"
                  agents={
                    Map {
                      "fakeid" => Object {
                        "connectionState": "connected",
                        "id": "fakeid",
                        "name": "fake",
                      },
                    }
                  }
                  dispatch={[Function]}
                  match={
                    Object {
                      "params": Object {
                        "agentId": "fakeid",
                      },
                    }
                  }
                  onSocketClose={[Function]}
                  readOnly={true}
                >
                  <WithTheme(Terminal)
                    agent={
                      Object {
                        "connectionState": "connected",
                        "id": "fakeid",
                        "name": "fake",
                      }
                    }
                    agentEndpoint="action/linpeas"
                    onSocketClose={[Function]}
                    readOnly={true}
                  >
                    <Terminal
                      agent={
                        Object {
                          "connectionState": "connected",
                          "id": "fakeid",
                          "name": "fake",
                        }
                      }
                      agentEndpoint="action/linpeas"
                      onSocketClose={[Function]}
                      readOnly={true}
                      theme={
                        Object {
                          "accent": "#4D02EE",
                          "black": "#181818",
                          "boxShadow": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
                          "connectedColor": "#27AE60",
                          "connectingColor": "#F39C12",
                          "darkGrey": "#3E3E3E",
                          "darkWhite": "#F1F1F1",
                          "disconnectedColor": "#C0392B",
                          "error": "#ED3E2A",
                          "green": "#32E67E",
                          "inactive": "#363636",
                          "lightBlack": "#1B1B1B",
                          "name": "dark",
                          "overlay": "rgba(37, 37, 37, 0.6)",
                          "primary": "#02A3EE",
                          "red": "#ED3E2A",
                          "selectedBlack": "#252525",
                          "smallTextSize": "0.85rem",
                          "warning": "#ED852A",
                          "white": "#F8F8F8",
                        }
                      }
                    >
                      <styled.div>
                        <div
                          className="c1"
                        >
                          <styled.div
                            data-testid="terminal"
                          >
                            <div
                              className="c2"
                              data-testid="terminal"
                            />
                          </styled.div>
                        </div>
                      </styled.div>
                    </Terminal>
                  </WithTheme(Terminal)>
                </TerminalPage>
              </Connect(TerminalPage)>
            </div>
          </styled.div>
        </Linpeas>
      </Connect(Linpeas)>
    </Component>
  </Provider>
</div>
`;

exports[`linpeas correctly toggles export dialog 1`] = `
.c1 {
  height: 100%;
  width: 100%;
  padding: 20px;
  box-sizing: border-box;
}

.c2 {
  height: 100%;
  width: 100%;
}

.c2 .xterm-viewport {
  overflow: hidden !important;
}

.c4 {
  cursor: pointer;
}

.c0 {
  height: 100%;
}

.c3 {
  position: absolute;
  width: 55px;
  height: 55px;
  bottom: 30px;
  right: 30px;
  background-color: #02A3EE;
  border-radius: 50%;
  z-index: 3;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  cursor: pointer;
}

.c3 * {
  margin: 0 auto;
}

<div>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Component
      theme={
        Object {
          "accent": "#4D02EE",
          "black": "#181818",
          "boxShadow": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
          "connectedColor": "#27AE60",
          "connectingColor": "#F39C12",
          "darkGrey": "#3E3E3E",
          "darkWhite": "#F1F1F1",
          "disconnectedColor": "#C0392B",
          "error": "#ED3E2A",
          "green": "#32E67E",
          "inactive": "#363636",
          "lightBlack": "#1B1B1B",
          "name": "dark",
          "overlay": "rgba(37, 37, 37, 0.6)",
          "primary": "#02A3EE",
          "red": "#ED3E2A",
          "selectedBlack": "#252525",
          "smallTextSize": "0.85rem",
          "warning": "#ED852A",
          "white": "#F8F8F8",
        }
      }
    >
      <Connect(Linpeas)
        match={
          Object {
            "params": Object {
              "agentId": "fakeid",
            },
          }
        }
      >
        <Linpeas
          agents={
            Map {
              "fakeid" => Object {
                "connectionState": "connected",
                "id": "fakeid",
                "name": "fake",
              },
            }
          }
          dispatch={[Function]}
          match={
            Object {
              "params": Object {
                "agentId": "fakeid",
              },
            }
          }
        >
          <styled.div>
            <div
              className="c0"
            >
              <Connect(TerminalPage)
                agentEndpoint="action/linpeas"
                agents={
                  Map {
                    "fakeid" => Object {
                      "connectionState": "connected",
                      "id": "fakeid",
                      "name": "fake",
                    },
                  }
                }
                dispatch={[Function]}
                match={
                  Object {
                    "params": Object {
                      "agentId": "fakeid",
                    },
                  }
                }
                onSocketClose={[Function]}
                readOnly={true}
              >
                <TerminalPage
                  agentEndpoint="action/linpeas"
                  agents={
                    Map {
                      "fakeid" => Object {
                        "connectionState": "connected",
                        "id": "fakeid",
                        "name": "fake",
                      },
                    }
                  }
                  dispatch={[Function]}
                  match={
                    Object {
                      "params": Object {
                        "agentId": "fakeid",
                      },
                    }
                  }
                  onSocketClose={[Function]}
                  readOnly={true}
                >
                  <WithTheme(Terminal)
                    agent={
                      Object {
                        "connectionState": "connected",
                        "id": "fakeid",
                        "name": "fake",
                      }
                    }
                    agentEndpoint="action/linpeas"
                    onSocketClose={[Function]}
                    readOnly={true}
                  >
                    <Terminal
                      agent={
                        Object {
                          "connectionState": "connected",
                          "id": "fakeid",
                          "name": "fake",
                        }
                      }
                      agentEndpoint="action/linpeas"
                      onSocketClose={[Function]}
                      readOnly={true}
                      theme={
                        Object {
                          "accent": "#4D02EE",
                          "black": "#181818",
                          "boxShadow": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
                          "connectedColor": "#27AE60",
                          "connectingColor": "#F39C12",
                          "darkGrey": "#3E3E3E",
                          "darkWhite": "#F1F1F1",
                          "disconnectedColor": "#C0392B",
                          "error": "#ED3E2A",
                          "green": "#32E67E",
                          "inactive": "#363636",
                          "lightBlack": "#1B1B1B",
                          "name": "dark",
                          "overlay": "rgba(37, 37, 37, 0.6)",
                          "primary": "#02A3EE",
                          "red": "#ED3E2A",
                          "selectedBlack": "#252525",
                          "smallTextSize": "0.85rem",
                          "warning": "#ED852A",
                          "white": "#F8F8F8",
                        }
                      }
                    >
                      <styled.div>
                        <div
                          className="c1"
                        >
                          <styled.div
                            data-testid="terminal"
                          >
                            <div
                              className="c2"
                              data-testid="terminal"
                            />
                          </styled.div>
                        </div>
                      </styled.div>
                    </Terminal>
                  </WithTheme(Terminal)>
                </TerminalPage>
              </Connect(TerminalPage)>
              <styled.div
                id="export"
                onClick={[Function]}
              >
                <div
                  className="c3"
                  id="export"
                  onClick={[Function]}
                >
                  <styled.i
                    active={true}
                    className="fas fa-download"
                  >
                    <i
                      className="c4 fas fa-download"
                    />
                  </styled.i>
                </div>
              </styled.div>
            </div>
          </styled.div>
        </Linpeas>
      </Connect(Linpeas)>
    </Component>
  </Provider>
</div>
`;

exports[`linpeas correctly toggles export dialog 2`] = `
.c1 {
  height: 100%;
  width: 100%;
  padding: 20px;
  box-sizing: border-box;
}

.c2 {
  height: 100%;
  width: 100%;
}

.c2 .xterm-viewport {
  overflow: hidden !important;
}

.c14 {
  max-height: 50px;
  padding: 12px;
  border: none;
  background-color: #4D02EE;
  border-radius: 5px;
  color: white;
  font-family: 'B612',sans-serif;
  font-size: 1rem;
  font-weight: 700;
  cursor: pointer;
}

.c14:hover {
  opacity: 0.90;
}

.c14:focus {
  outline: none;
}

.c14:active {
  opacity: 0.80;
}

.c14:disabled {
  background-color: #3E3E3E;
}

.c14:disabled:hover {
  opacity: 1;
  cursor: auto;
}

.c15 {
  background-color: transparent;
  border: 1px solid #4D02EE;
}

.c6 {
  box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);
  padding: 40px;
  border-radius: 10px;
  background-color: #1B1B1B;
}

.c5 {
  display: inline;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 10;
  background-color: rgba(37,37,37,0.6);
}

.c7 {
  position: absolute;
  left: 0;
  right: 0;
  top: 50%;
  margin-left: auto;
  margin-right: auto;
  min-height: 250px;
  width: 100%;
  max-width: 400px;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  box-sizing: border-box;
}

.c8 {
  text-align: center;
}

.c9 {
  height: 100%;
  display: grid;
  grid-template-rows: auto;
  grid-row-gap: 20px;
}

.c13 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: space-around;
  -webkit-justify-content: space-around;
  -ms-flex-pack: space-around;
  justify-content: space-around;
}

.c13> button {
  min-width: 150px;
  margin: 16px 0px;
}

.c10 {
  height: 80px;
}

.c11 {
  min-height: 50px;
  width: 100%;
  background: #F8F8F8;
  color: #1B1B1B;
  border: none;
  border-radius: 5px;
  font-family: 'Libre Franklin',sans-serif;
  font-size: 1rem;
  padding-left: 10px;
  opacity: 0.9;
  border: 1px solid transparent;
}

.c11:focus {
  outline: none;
  border: 1px solid #4D02EE;
}

.c12 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c4 {
  cursor: pointer;
}

.c0 {
  height: 100%;
}

.c3 {
  position: absolute;
  width: 55px;
  height: 55px;
  bottom: 30px;
  right: 30px;
  background-color: #02A3EE;
  border-radius: 50%;
  z-index: 3;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  cursor: pointer;
}

.c3 * {
  margin: 0 auto;
}

@media (max-width:47.9375em) {
  .c13 {
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
    -webkit-flex-direction: column-reverse;
    -ms-flex-direction: column-reverse;
    flex-direction: column-reverse;
  }
}

<div>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Component
      theme={
        Object {
          "accent": "#4D02EE",
          "black": "#181818",
          "boxShadow": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
          "connectedColor": "#27AE60",
          "connectingColor": "#F39C12",
          "darkGrey": "#3E3E3E",
          "darkWhite": "#F1F1F1",
          "disconnectedColor": "#C0392B",
          "error": "#ED3E2A",
          "green": "#32E67E",
          "inactive": "#363636",
          "lightBlack": "#1B1B1B",
          "name": "dark",
          "overlay": "rgba(37, 37, 37, 0.6)",
          "primary": "#02A3EE",
          "red": "#ED3E2A",
          "selectedBlack": "#252525",
          "smallTextSize": "0.85rem",
          "warning": "#ED852A",
          "white": "#F8F8F8",
        }
      }
    >
      <Connect(Linpeas)
        match={
          Object {
            "params": Object {
              "agentId": "fakeid",
            },
          }
        }
      >
        <Linpeas
          agents={
            Map {
              "fakeid" => Object {
                "connectionState": "connected",
                "id": "fakeid",
                "name": "fake",
              },
            }
          }
          dispatch={[Function]}
          match={
            Object {
              "params": Object {
                "agentId": "fakeid",
              },
            }
          }
        >
          <styled.div>
            <div
              className="c0"
            >
              <Connect(TerminalPage)
                agentEndpoint="action/linpeas"
                agents={
                  Map {
                    "fakeid" => Object {
                      "connectionState": "connected",
                      "id": "fakeid",
                      "name": "fake",
                    },
                  }
                }
                dispatch={[Function]}
                match={
                  Object {
                    "params": Object {
                      "agentId": "fakeid",
                    },
                  }
                }
                onSocketClose={[Function]}
                readOnly={true}
              >
                <TerminalPage
                  agentEndpoint="action/linpeas"
                  agents={
                    Map {
                      "fakeid" => Object {
                        "connectionState": "connected",
                        "id": "fakeid",
                        "name": "fake",
                      },
                    }
                  }
                  dispatch={[Function]}
                  match={
                    Object {
                      "params": Object {
                        "agentId": "fakeid",
                      },
                    }
                  }
                  onSocketClose={[Function]}
                  readOnly={true}
                >
                  <WithTheme(Terminal)
                    agent={
                      Object {
                        "connectionState": "connected",
                        "id": "fakeid",
                        "name": "fake",
                      }
                    }
                    agentEndpoint="action/linpeas"
                    onSocketClose={[Function]}
                    readOnly={true}
                  >
                    <Terminal
                      agent={
                        Object {
                          "connectionState": "connected",
                          "id": "fakeid",
                          "name": "fake",
                        }
                      }
                      agentEndpoint="action/linpeas"
                      onSocketClose={[Function]}
                      readOnly={true}
                      theme={
                        Object {
                          "accent": "#4D02EE",
                          "black": "#181818",
                          "boxShadow": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
                          "connectedColor": "#27AE60",
                          "connectingColor": "#F39C12",
                          "darkGrey": "#3E3E3E",
                          "darkWhite": "#F1F1F1",
                          "disconnectedColor": "#C0392B",
                          "error": "#ED3E2A",
                          "green": "#32E67E",
                          "inactive": "#363636",
                          "lightBlack": "#1B1B1B",
                          "name": "dark",
                          "overlay": "rgba(37, 37, 37, 0.6)",
                          "primary": "#02A3EE",
                          "red": "#ED3E2A",
                          "selectedBlack": "#252525",
                          "smallTextSize": "0.85rem",
                          "warning": "#ED852A",
                          "white": "#F8F8F8",
                        }
                      }
                    >
                      <styled.div>
                        <div
                          className="c1"
                        >
                          <styled.div
                            data-testid="terminal"
                          >
                            <div
                              className="c2"
                              data-testid="terminal"
                            />
                          </styled.div>
                        </div>
                      </styled.div>
                    </Terminal>
                  </WithTheme(Terminal)>
                </TerminalPage>
              </Connect(TerminalPage)>
              <styled.div
                id="export"
                onClick={[Function]}
              >
                <div
                  className="c3"
                  id="export"
                  onClick={[Function]}
                >
                  <styled.i
                    active={true}
                    className="fas fa-download"
                  >
                    <i
                      className="c4 fas fa-download"
                    />
                  </styled.i>
                </div>
              </styled.div>
              <ExportLinpeas
                agent={
                  Object {
                    "connectionState": "connected",
                    "id": "fakeid",
                    "name": "fake",
                  }
                }
                onClose={[Function]}
              >
                <FormModal
                  initialValues={
                    Object {
                      "filename": "",
                    }
                  }
                  onClose={[Function]}
                  onSubmit={[Function]}
                  primaryActionTitle="Export"
                  title="Export report"
                  validationSchema={
                    ObjectSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_defaultDefault": [Function],
                      "_deps": Array [],
                      "_excludedEdges": Array [],
                      "_exclusive": Object {},
                      "_mutate": undefined,
                      "_nodes": Array [
                        "filename",
                      ],
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "object",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "fields": Object {
                        "filename": StringSchema {
                          "_blacklist": RefSet {
                            "list": Set {},
                            "refs": Map {},
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "max": true,
                            "trim": false,
                          },
                          "_mutate": undefined,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Set {},
                            "refs": Map {},
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                            [Function],
                          ],
                          "type": "string",
                        },
                      },
                      "tests": Array [],
                      "transforms": Array [
                        [Function],
                      ],
                      "type": "object",
                    }
                  }
                >
                  <ModalOverlay
                    closeModalFunction={[Function]}
                  >
                    <styled.div
                      onClick={[Function]}
                    >
                      <div
                        className="c5"
                        onClick={[Function]}
                      >
                        <Styled(styled.div)>
                          <div
                            className="c6 c7"
                          >
                            <styled.h2>
                              <h2
                                className="c8"
                              >
                                Export report
                              </h2>
                            </styled.h2>
                            <Formik
                              initialValues={
                                Object {
                                  "filename": "",
                                }
                              }
                              onSubmit={[Function]}
                              validateOnChange={false}
                              validationSchema={
                                ObjectSchema {
                                  "_blacklist": RefSet {
                                    "list": Set {},
                                    "refs": Map {},
                                  },
                                  "_conditions": Array [],
                                  "_defaultDefault": [Function],
                                  "_deps": Array [],
                                  "_excludedEdges": Array [],
                                  "_exclusive": Object {},
                                  "_mutate": undefined,
                                  "_nodes": Array [
                                    "filename",
                                  ],
                                  "_options": Object {
                                    "abortEarly": true,
                                    "recursive": true,
                                  },
                                  "_type": "object",
                                  "_typeError": [Function],
                                  "_whitelist": RefSet {
                                    "list": Set {},
                                    "refs": Map {},
                                  },
                                  "fields": Object {
                                    "filename": StringSchema {
                                      "_blacklist": RefSet {
                                        "list": Set {},
                                        "refs": Map {},
                                      },
                                      "_conditions": Array [],
                                      "_deps": Array [],
                                      "_exclusive": Object {
                                        "max": true,
                                        "trim": false,
                                      },
                                      "_mutate": undefined,
                                      "_options": Object {
                                        "abortEarly": true,
                                        "recursive": true,
                                      },
                                      "_type": "string",
                                      "_typeError": [Function],
                                      "_whitelist": RefSet {
                                        "list": Set {},
                                        "refs": Map {},
                                      },
                                      "tests": Array [
                                        [Function],
                                        [Function],
                                      ],
                                      "transforms": Array [
                                        [Function],
                                        [Function],
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "tests": Array [],
                                  "transforms": Array [
                                    [Function],
                                  ],
                                  "type": "object",
                                }
                              }
                            >
                              <styled.form
                                onSubmit={[Function]}
                              >
                                <form
                                  className="c9"
                                  onSubmit={[Function]}
                                >
                                  <div>
                                    <div>
                                      <h4>
                                        Filename
                                      </h4>
                                      <Input
                                        error=""
                                        inverted={false}
                                        name="filename"
                                        onChange={[Function]}
                                        placeholder="LinPEAS-fake.txt"
                                        value=""
                                      >
                                        <styled.div>
                                          <div
                                            className="c10"
                                          >
                                            <styled.input
                                              hasError={false}
                                              inverted={false}
                                              name="filename"
                                              onChange={[Function]}
                                              placeholder="LinPEAS-fake.txt"
                                              value=""
                                            >
                                              <input
                                                className="c11"
                                                name="filename"
                                                onChange={[Function]}
                                                placeholder="LinPEAS-fake.txt"
                                                value=""
                                              />
                                            </styled.input>
                                          </div>
                                        </styled.div>
                                      </Input>
                                    </div>
                                    <styled.div>
                                      <div
                                        className="c12"
                                      >
                                        <h4>
                                          ANSI
                                        </h4>
                                        <ReactSwitch
                                          activeBoxShadow="0 0 2px 3px #3bf"
                                          boxShadow={null}
                                          checked={false}
                                          checkedIcon={
                                            <svg
                                              height="100%"
                                              style={
                                                Object {
                                                  "position": "absolute",
                                                  "top": 0,
                                                }
                                              }
                                              viewBox="-2 -5 17 21"
                                              width="100%"
                                            >
                                              <path
                                                d="M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0"
                                                fill="#fff"
                                                fillRule="evenodd"
                                              />
                                            </svg>
                                          }
                                          disabled={false}
                                          height={28}
                                          offColor="#888"
                                          offHandleColor="#fff"
                                          onChange={[Function]}
                                          onColor="#080"
                                          onHandleColor="#fff"
                                          uncheckedIcon={
                                            <svg
                                              height="100%"
                                              style={
                                                Object {
                                                  "position": "absolute",
                                                  "top": 0,
                                                }
                                              }
                                              viewBox="-2 -5 14 20"
                                              width="100%"
                                            >
                                              <path
                                                d="M9.9 2.12L7.78 0 4.95 2.828 2.12 0 0 2.12l2.83 2.83L0 7.776 2.123 9.9 4.95 7.07 7.78 9.9 9.9 7.776 7.072 4.95 9.9 2.12"
                                                fill="#fff"
                                                fillRule="evenodd"
                                              />
                                            </svg>
                                          }
                                          width={56}
                                        >
                                          <div
                                            style={
                                              Object {
                                                "MozTransition": "opacity 0.25s",
                                                "MozUserSelect": "none",
                                                "WebkitTapHighlightColor": "rgba(0, 0, 0, 0)",
                                                "WebkitTransition": "opacity 0.25s",
                                                "WebkitUserSelect": "none",
                                                "borderRadius": 14,
                                                "direction": "ltr",
                                                "display": "inline-block",
                                                "msUserSelect": "none",
                                                "opacity": 1,
                                                "position": "relative",
                                                "textAlign": "left",
                                                "touchAction": "none",
                                                "transition": "opacity 0.25s",
                                                "userSelect": "none",
                                              }
                                            }
                                          >
                                            <div
                                              className="react-switch-bg"
                                              onClick={[Function]}
                                              onMouseDown={[Function]}
                                              style={
                                                Object {
                                                  "MozTransition": "background 0.25s",
                                                  "WebkitTransition": "background 0.25s",
                                                  "background": "#888888",
                                                  "borderRadius": 14,
                                                  "cursor": "pointer",
                                                  "height": 28,
                                                  "margin": 0,
                                                  "position": "relative",
                                                  "transition": "background 0.25s",
                                                  "width": 56,
                                                }
                                              }
                                            >
                                              <div
                                                style={
                                                  Object {
                                                    "MozTransition": "opacity 0.25s",
                                                    "WebkitTransition": "opacity 0.25s",
                                                    "height": 28,
                                                    "opacity": 0,
                                                    "pointerEvents": "none",
                                                    "position": "relative",
                                                    "transition": "opacity 0.25s",
                                                    "width": 30,
                                                  }
                                                }
                                              >
                                                <svg
                                                  height="100%"
                                                  style={
                                                    Object {
                                                      "position": "absolute",
                                                      "top": 0,
                                                    }
                                                  }
                                                  viewBox="-2 -5 17 21"
                                                  width="100%"
                                                >
                                                  <path
                                                    d="M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0"
                                                    fill="#fff"
                                                    fillRule="evenodd"
                                                  />
                                                </svg>
                                              </div>
                                              <div
                                                style={
                                                  Object {
                                                    "MozTransition": "opacity 0.25s",
                                                    "WebkitTransition": "opacity 0.25s",
                                                    "height": 28,
                                                    "opacity": 1,
                                                    "pointerEvents": "none",
                                                    "position": "absolute",
                                                    "right": 0,
                                                    "top": 0,
                                                    "transition": "opacity 0.25s",
                                                    "width": 30,
                                                  }
                                                }
                                              >
                                                <svg
                                                  height="100%"
                                                  style={
                                                    Object {
                                                      "position": "absolute",
                                                      "top": 0,
                                                    }
                                                  }
                                                  viewBox="-2 -5 14 20"
                                                  width="100%"
                                                >
                                                  <path
                                                    d="M9.9 2.12L7.78 0 4.95 2.828 2.12 0 0 2.12l2.83 2.83L0 7.776 2.123 9.9 4.95 7.07 7.78 9.9 9.9 7.776 7.072 4.95 9.9 2.12"
                                                    fill="#fff"
                                                    fillRule="evenodd"
                                                  />
                                                </svg>
                                              </div>
                                            </div>
                                            <div
                                              className="react-switch-handle"
                                              onClick={[Function]}
                                              onMouseDown={[Function]}
                                              onTouchCancel={[Function]}
                                              onTouchEnd={[Function]}
                                              onTouchMove={[Function]}
                                              onTouchStart={[Function]}
                                              style={
                                                Object {
                                                  "MozTransition": "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
                                                  "WebkitTransition": "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
                                                  "background": "#ffffff",
                                                  "border": 0,
                                                  "borderRadius": "50%",
                                                  "boxShadow": null,
                                                  "cursor": "pointer",
                                                  "display": "inline-block",
                                                  "height": 26,
                                                  "outline": 0,
                                                  "position": "absolute",
                                                  "top": 1,
                                                  "transform": "translateX(1px)",
                                                  "transition": "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
                                                  "width": 26,
                                                }
                                              }
                                            />
                                            <input
                                              checked={false}
                                              disabled={false}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyUp={[Function]}
                                              role="switch"
                                              style={
                                                Object {
                                                  "border": 0,
                                                  "clip": "rect(0 0 0 0)",
                                                  "height": 1,
                                                  "margin": -1,
                                                  "overflow": "hidden",
                                                  "padding": 0,
                                                  "position": "absolute",
                                                  "width": 1,
                                                }
                                              }
                                              type="checkbox"
                                            />
                                          </div>
                                        </ReactSwitch>
                                      </div>
                                    </styled.div>
                                  </div>
                                  <styled.div>
                                    <div
                                      className="c13"
                                    >
                                      <Styled(styled.button)
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c14 c15"
                                          onClick={[Function]}
                                        >
                                          Cancel
                                        </button>
                                      </Styled(styled.button)>
                                      <styled.button>
                                        <button
                                          className="c14"
                                        >
                                          Export
                                        </button>
                                      </styled.button>
                                    </div>
                                  </styled.div>
                                </form>
                              </styled.form>
                            </Formik>
                          </div>
                        </Styled(styled.div)>
                      </div>
                    </styled.div>
                  </ModalOverlay>
                </FormModal>
              </ExportLinpeas>
            </div>
          </styled.div>
        </Linpeas>
      </Connect(Linpeas)>
    </Component>
  </Provider>
</div>
`;

exports[`linpeas correctly toggles export dialog 3`] = `
.c1 {
  height: 100%;
  width: 100%;
  padding: 20px;
  box-sizing: border-box;
}

.c2 {
  height: 100%;
  width: 100%;
}

.c2 .xterm-viewport {
  overflow: hidden !important;
}

.c4 {
  cursor: pointer;
}

.c0 {
  height: 100%;
}

.c3 {
  position: absolute;
  width: 55px;
  height: 55px;
  bottom: 30px;
  right: 30px;
  background-color: #02A3EE;
  border-radius: 50%;
  z-index: 3;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  cursor: pointer;
}

.c3 * {
  margin: 0 auto;
}

@media (max-width:47.9375em) {

}

<div>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Component
      theme={
        Object {
          "accent": "#4D02EE",
          "black": "#181818",
          "boxShadow": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
          "connectedColor": "#27AE60",
          "connectingColor": "#F39C12",
          "darkGrey": "#3E3E3E",
          "darkWhite": "#F1F1F1",
          "disconnectedColor": "#C0392B",
          "error": "#ED3E2A",
          "green": "#32E67E",
          "inactive": "#363636",
          "lightBlack": "#1B1B1B",
          "name": "dark",
          "overlay": "rgba(37, 37, 37, 0.6)",
          "primary": "#02A3EE",
          "red": "#ED3E2A",
          "selectedBlack": "#252525",
          "smallTextSize": "0.85rem",
          "warning": "#ED852A",
          "white": "#F8F8F8",
        }
      }
    >
      <Connect(Linpeas)
        match={
          Object {
            "params": Object {
              "agentId": "fakeid",
            },
          }
        }
      >
        <Linpeas
          agents={
            Map {
              "fakeid" => Object {
                "connectionState": "connected",
                "id": "fakeid",
                "name": "fake",
              },
            }
          }
          dispatch={[Function]}
          match={
            Object {
              "params": Object {
                "agentId": "fakeid",
              },
            }
          }
        >
          <styled.div>
            <div
              className="c0"
            >
              <Connect(TerminalPage)
                agentEndpoint="action/linpeas"
                agents={
                  Map {
                    "fakeid" => Object {
                      "connectionState": "connected",
                      "id": "fakeid",
                      "name": "fake",
                    },
                  }
                }
                dispatch={[Function]}
                match={
                  Object {
                    "params": Object {
                      "agentId": "fakeid",
                    },
                  }
                }
                onSocketClose={[Function]}
                readOnly={true}
              >
                <TerminalPage
                  agentEndpoint="action/linpeas"
                  agents={
                    Map {
                      "fakeid" => Object {
                        "connectionState": "connected",
                        "id": "fakeid",
                        "name": "fake",
                      },
                    }
                  }
                  dispatch={[Function]}
                  match={
                    Object {
                      "params": Object {
                        "agentId": "fakeid",
                      },
                    }
                  }
                  onSocketClose={[Function]}
                  readOnly={true}
                >
                  <WithTheme(Terminal)
                    agent={
                      Object {
                        "connectionState": "connected",
                        "id": "fakeid",
                        "name": "fake",
                      }
                    }
                    agentEndpoint="action/linpeas"
                    onSocketClose={[Function]}
                    readOnly={true}
                  >
                    <Terminal
                      agent={
                        Object {
                          "connectionState": "connected",
                          "id": "fakeid",
                          "name": "fake",
                        }
                      }
                      agentEndpoint="action/linpeas"
                      onSocketClose={[Function]}
                      readOnly={true}
                      theme={
                        Object {
                          "accent": "#4D02EE",
                          "black": "#181818",
                          "boxShadow": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
                          "connectedColor": "#27AE60",
                          "connectingColor": "#F39C12",
                          "darkGrey": "#3E3E3E",
                          "darkWhite": "#F1F1F1",
                          "disconnectedColor": "#C0392B",
                          "error": "#ED3E2A",
                          "green": "#32E67E",
                          "inactive": "#363636",
                          "lightBlack": "#1B1B1B",
                          "name": "dark",
                          "overlay": "rgba(37, 37, 37, 0.6)",
                          "primary": "#02A3EE",
                          "red": "#ED3E2A",
                          "selectedBlack": "#252525",
                          "smallTextSize": "0.85rem",
                          "warning": "#ED852A",
                          "white": "#F8F8F8",
                        }
                      }
                    >
                      <styled.div>
                        <div
                          className="c1"
                        >
                          <styled.div
                            data-testid="terminal"
                          >
                            <div
                              className="c2"
                              data-testid="terminal"
                            />
                          </styled.div>
                        </div>
                      </styled.div>
                    </Terminal>
                  </WithTheme(Terminal)>
                </TerminalPage>
              </Connect(TerminalPage)>
              <styled.div
                id="export"
                onClick={[Function]}
              >
                <div
                  className="c3"
                  id="export"
                  onClick={[Function]}
                >
                  <styled.i
                    active={true}
                    className="fas fa-download"
                  >
                    <i
                      className="c4 fas fa-download"
                    />
                  </styled.i>
                </div>
              </styled.div>
            </div>
          </styled.div>
        </Linpeas>
      </Connect(Linpeas)>
    </Component>
  </Provider>
</div>
`;
